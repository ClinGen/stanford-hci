[project]
name = "hci"
version = "0.1.0"
description = "The HLA Curation Interface is a web application that biocurators can use to classify HLA alleles and haplotypes."
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "django>=5.2",
    "requests>=2.32.3",
]

[dependency-groups]
dev = [
    "django-stubs[compatible-mypy]>=5.1.3",
    "mypy>=1.15.0",
    "pytest-django>=4.11.1",
    "ruff>=0.11.5",
]

[tool.ruff]
line-length = 88
target-version = "py313"
exclude = [
    "migrations",
    ".mypy_cache",
    "__pycache__",
    "tests",
]

[tool.ruff.lint]
preview = true  # Use Ruff's "preview" (beta) features.
select = [
    # Basics:
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes rules
    "N",    # pep8-naming rules (enforce PEP8 naming conventions)
    "C90",  # mccabe (don't allow high cyclomatic complexity)

    # Imports:
    "I",    # isort rules (sort imports)

    # Docstrings:
    "D",    # pydocstyle (enforce style for docstrings)
    "DOC",  # pydoclint (lint docstrings)

    # flake8 plugins:
    "ANN",   # flake8-annotations (use PEP 3107 function annotations)
    "S",     # flake8-bandit (perform security-focused static analysis)
    "FBT",   # flake8-boolean-trap (don't use boolean trap antipattern)
    "B",     # flake8-bugbear (provide an opinionated set of lint rules)
    "A",     # flake8-builtins (provide a set of lint rules for builtins)
    "COM",   # flake8-commas (provide a set of lint rules for commas)
    "C4",    # flake8-comprehensions (provide a set of lint rules for comprehensions)
    "DTZ",   # flake8-datetimez (use the datetime library in a safe way)
    "T10",   # flake8-debugger (don't allow debugging code)
    "DJ",    # flake8-django (provide a set of lint rules for Django)
    "EM",    # flake8-errmsg (provide a set of rules for error messages)
    "EXE",   # flake8-executable (provide a set of lint rules for Python scripts)
    "FIX",   # flake8-fixme (don't allow "I'll do it later" comments)
    "ISC",   # flake8-implicit-string-concat (provide a set of lint rules for string concatenation)
    "LOG",   # flake8-logging (provide a set of lint rules for logging)
    "G",     # flake8-logging-format (provide a set of lint rules for the format of log strings),
    "INP",   # flake8-no-pep420 (don't allow implicit namespaces)
    "PIE",   # flake8-pie (provide a set of miscellaneous lint rules)
    "T20",   # flake8-print (don't allow print statements; use logs instead)
    "PT",    # flake8-pytest-style (provide a set of lint rules for Pytest tests)
    "Q",     # flake8-quotes (provide a set of lint rules about quotes)
    "RSE",   # flake8-raise (provide a set of lint rules for the raise statement)
    "RET",   # flake8-return (provide a set of lint rules for the return statement)
    "SLF",   # flake8-self (don't allow access to private members)
    "SIM",   # flake8-simplify (provide a set of lint rules for simplifying various expressions)
    "TID",   # flake8-tidy-imports (provide a set of lint rules for imports)
    "TD",    # flake8-todos (provide a set of lint rules for todo comments)
    "ARG",   # flake8-unused-arguments (provide a set of lint rules for unused arguments)
    "PTH",   # flake8-use-pathlib (use the new pathlib library)

    # Other:
    "PERF",  # Perflint (provide a set of lint rules for performance)
    "UP",    # pyupgrade (use new Python syntax)
    "RUF",   # Ruff-specific rules (provide a set of miscellaneous lint rules)
    "TRY",   # tryceratops (provide a set of lint rules for try-except statements)
]
ignore = ["COM812", "RUF100"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # ignore unused imports
    "D104"  # ignore docstring requirement
]
"*_test.py" = [
    "S101"
]

[tool.mypy]
plugins = ["mypy_django_plugin.main"]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
strict_equality = true
warn_return_any = true
warn_unused_ignores = true

[tool.django-stubs]
django_settings_module = "config.settings.dev"
strict_settings = true

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings.dev"
python_files = ["*_test.py"]
