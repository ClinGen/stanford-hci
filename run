#!/usr/bin/env bash
#
# This script can be used to run most command line tasks for this project. You
# can create an alias for your shell:
#     alias run="./run"
# This script is inspired by https://github.com/adriancooney/Taskfile. This
# script assumes you're running it from the root of the repository.

# Exit immediately if a command returns a non-zero status.
set -o errexit

# The return value of a pipeline is the value of the last (rightmost) command to
# exit with a non-zero status, or zero if all commands in the pipeline exit
# successfully.
set -o pipefail

#===============================================================================
# Code quality tasks
#===============================================================================

# Format Python source code, format Python docstrings, and sort Python imports.
function fmt:python {
    # Check if the first argument is `--check`. The `--check` flag makes it so
    # that the formatting is checked for correctness rather than correcting
    # it.
    if [[ "$1" == "--check" ]]; then
        black --check .
        docformatter --check .
        isort --check .
    else
        black .
        docformatter .
        isort .
    fi

}

# Format Bash scripts.
function fmt:bash {
    # Check if the first argument is `--check`. The `--check` flag makes it so
    # that the formatting is checked for correctness rather than correcting
    # it.
    if [[ "$1" == "--check" ]]; then
        shfmt --indent 4 --diff ./run
    else
        shfmt --indent 4 --write ./run
    fi
}

# Format YAML files.
function fmt:yaml {
    # Check if the first argument is `--check`. The `--check` flag makes it so
    # that the formatting is checked for correctness rather than correcting
    # it.
    if [[ "$1" == "--check" ]]; then
        yamlfmt -lint ./.github/workflows/ci.yml
    else
        yamlfmt ./.github/workflows/ci.yml
    fi

}

# Format the HashiCorp Configuration Language (HCL) files, i.e. the Terraform
# files.
function fmt:terraform {
    cd infra || exit
    # Check if the first argument is `--check`. The `--check` flag makes it so
    # that the formatting is checked for correctness rather than correcting
    # it.
    if [[ "$1" == "--check" ]]; then
        terraform fmt -check
    else
        terraform fmt
    fi
    cd .. || exit
}

# Lint the Python source code.
function lint:python {
    cd src && pylint .
    cd .. || exit
}

# Lint Bash scripts.
function lint:bash {
    shellcheck ./run
}

# Lint the Dockerfile.
function lint:docker {
    hadolint ./Dockerfile
}

# Lint the HashiCorp Configuration Language (HCL) files, i.e. the Terraform
# files.
function lint:terraform {
    cd infra || exit
    terraform validate
    cd .. || exit
}

# Run a type checker on the Python source code. This will look at the PEP 484
# type hints in the code and statically analyze them. See
# https://peps.python.org/pep-0484/ for more information.
function type:python {
    cd src && mypy .
    cd .. || exit
}

# Run the Django test suite.
function test:python {
    cd src && python manage.py test
    cd .. || exit
}

# Run Python code quality checks.
function check:python {
    # The `--check` flag makes it so that the code formatting is checked for
    # correctness rather than correcting it.
    fmt:python --check
    lint:python
    type:python
    test:python
}

# Run Bash script quality checks.
function check:bash {
    fmt:bash --check
    lint:bash
}

# Run Dockerfile quality checks.
function check:docker {
    lint:docker
}

# Run YAML quality checks.
function check:yaml {
    fmt:yaml --check
}

# Run Terraform quality checks.
function check:terraform {
    fmt:terraform --check
    lint:terraform
}

# Run all checks. Could be used as part of a pre-commit hook to be run on your
# machine.
function check {
    check:python --check
    check:bash --check
    check:docker
    check:yaml --check
}

#===============================================================================
# Convenience tasks
#===============================================================================

# Build the app for production deployment.
function build {
    cd src &&
        python manage.py collectstatic --no-input
}

# Run the Django application in production mode.
function prod {
    cd src && gunicorn --workers 2 --bind 0.0.0.0:8000 config.wsgi
}

# Run the Django application in development mode.
function dev {
    cd src && python manage.py runserver
}

# Encrypt the secrets file.
function encrypt {
    set +o history # Temporarily turn off Bash history.
    echo "Password:"
    read -r password
    openssl enc -aes-256-cbc -pbkdf2 -salt -in ./infra/secrets.tfvars -out ./infra/secrets.tfvars.enc -pass "pass:$password"
    rm ./infra/secrets.tfvars
    set -o history # Turn Bash history back on.
}

# Decrypt the secrets file.
function decrypt {
    set +o history # Temporarily turn off Bash history.
    echo "Password:"
    read -r password
    openssl enc -d -aes-256-cbc -pbkdf2 -salt -in ./infra/secrets.tfvars.enc -out ./infra/secrets.tfvars -pass "pass:$password"
    rm ./infra/secrets.tfvars.enc
    set -o history # Turn Bash history back on.
}

#===============================================================================
# Container tasks
#===============================================================================

# Install the project's dependencies in a container.
function container:deps {
    # The container won't have Pipenv, so we need to install it.
    pip install pipenv
    # Use Pipenv to generate a plain-old requirements file so we can install
    # dependencies globally.
    pipenv requirements --dev >requirements.txt
    pip install -r requirements.txt
}

# Build the HCI Docker image.
function container:build {
    docker buildx build --tag hci:latest .
}

# Remove all containers and images.
function container:purge {
    # We want word splitting here.
    # shellcheck disable=SC2046
    docker container remove --volumes --force $(docker container list --all --quiet)
    # We want word splitting here.
    # shellcheck disable=SC2046
    docker image remove --force $(docker image list --all --quiet)
}

# Run the Docker container.
function container {
    docker container run --name hci_container --publish 8000:8000 --detach hci:latest
    echo "http://0.0.0.0:8000"
}

# Run an arbitrary command in the (presumably) running Docker container.
function container:cmd {
    docker exec hci_container "${@}"
}

# Run continuous integration (CI) checks.
function container:ci {
    container:cmd ./run check:python
}

#===============================================================================
# Driver code
#===============================================================================

# Run the task the user supplies to the run script and time it.
TIMEFORMAT=$'\nTask completed in %3lR'
time "${@}"
