#!/usr/bin/env bash
#
# This script can be used to run most command line tasks for this project. You
# can create an alias for your shell:
#     alias run="./run"
# This script is inspired by https://github.com/adriancooney/Taskfile.

# Exit immediately if a command returns a non-zero status.
set -o errexit

# The return value of a pipeline is the value of the last (rightmost) command to
# exit with a non-zero status, or zero if all commands in the pipeline exit
# successfully.
set -o pipefail

# If DC is unset, use the default value to the right of the colon.
DC="${DC:-exec}"

# If we're running in CI we need to disable TTY allocation for docker compose
# commands that enable it by default, such as exec and run.
TTY=""
if [[ ! -t 1 ]]; then
    TTY="-T"
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

function _dc {
    docker compose "${DC}" ${TTY} "${@}"
}

function _build_run_down {
    docker compose build
    docker compose run ${TTY} "${@}"
    docker compose down
}

# -----------------------------------------------------------------------------
# Named functions are listed in the script's help menu.
# -----------------------------------------------------------------------------

function cmd {
    # Run any command you want in the web container.
    _dc web "${@}"
}

function manage {
    # Run any manage.py commands.

    # We need to collectstatic before we run our tests.
    if [ "${1-''}" == "test" ]; then
        cmd python3 manage.py collectstatic --no-input
    fi

    cmd python3 manage.py "${@}"
}

function lint:dockerfile {
    # Lint the Dockerfile.
    docker container run --rm -i \
        hadolint/hadolint hadolint --ignore DL3008 -t style "${@}" - <Dockerfile
}

function lint:bash {
    # Lint the run script and everything in the bin directory.
    shellcheck run bin/*
}

function lint {
    # Lint Python code.
    cmd flake8 "${@}"
}

function format:bash {
    # Run the shell formatter on the provided file.
    shfmt -i 4 -w run bin/*
}

function format:imports {
    # Sort Python imports.
    cmd isort . "${@}"
}

function format:docstrings {
    # Format Python docstrings.
    cmd docformatter --in-place --wrap-descriptions 79 --wrap-summaries 79 --recursive .
}

function format {
    # Format Python code.
    cmd black . "${@}"
}

function quality {
    # Perform all Python code quality commands together.
    format:imports
    format
    lint
}

function secret {
    # Generate a random secret that can be used for your SECRET_KEY and more.
    cmd python3 -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
}

function shell {
    # Start a shell session in the web container.
    cmd bash "${@}"
}

function psql {
    # Connect to Postgres.
    # shellcheck disable=SC1091
    . .env # Set the environment variables defined in the .env file.
    _dc postgres psql -U "${POSTGRES_USER}" "${@}"
}

function redis-cli {
    # Connect to Redis.
    _dc redis redis-cli "${@}"
}

function pip3:install {
    # Install pip3 dependencies and write lock file.
    _build_run_down web bash -c "cd .. && bin/pip3-install"
}

function pip3:outdated {
    # List any installed packages that are outdated.
    cmd pip3 list --outdated
}

function ci:install-deps {
    # Install Continuous Integration (CI) dependencies.
    sudo apt-get install -y curl shellcheck
    sudo curl \
        -L https://raw.githubusercontent.com/nickjj/wait-until/v0.2.0/wait-until \
        -o /usr/local/bin/wait-until && sudo chmod +x /usr/local/bin/wait-until
}

function ci:test {
    # Execute the Continuous Integration (CI) pipeline.
    #
    # It's expected that your CI environment has these tools available:
    #   - https://github.com/koalaman/shellcheck
    #   - https://github.com/nickjj/wait-until
    shellcheck run bin/*
    lint:dockerfile "${@}"

    cp --no-clobber .env.example .env

    docker compose build
    docker compose up -d

    # shellcheck disable=SC1091
    . .env
    wait-until "docker compose exec -T \
    -e PGPASSWORD=${POSTGRES_PASSWORD} postgres \
    psql -U ${POSTGRES_USER} ${POSTGRES_USER} -c 'SELECT 1'"

    docker compose logs

    lint "${@}"
    format:imports --check
    format --check
    manage migrate
    manage test
}

function help {
    printf "%s <task> [args]\n\nTasks:\n" "${0}"

    compgen -A function | grep -v "^_" | cat -n

    printf "\nExtended help:\n  Each task has comments for general usage\n"
}

TIMEFORMAT=$'\nTask completed in %3lR'
time "${@:-help}"
